/*
 * Copyright (c) 2017-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import groovy.transform.Immutable

import javax.inject.Inject

import org.gradle.tooling.provider.model.ToolingModelBuilder
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry

// Apply the DependencyTreePlugin defined below to register a custom model for the Tooling API. The plugin is required
// to get an instance of ToolingModelBuilderRegistry by dependency injection.
// See:
// https://docs.gradle.org/current/userguide/init_scripts.html#sec:init_script_plugins
// https://github.com/gradle/gradle/blob/176c18d/subprojects/docs/src/samples/toolingApi/customModel/plugin/src/main/java/org/gradle/sample/plugin/CustomPlugin.java
apply plugin: DependencyTreePlugin

interface DependencyTreeModel {
    String getName()

    List<Configuration> getConfigurations()

    List<String> getErrors()
}

@Immutable
class DependencyTreeModelImpl implements DependencyTreeModel, Serializable {
    String name
    List<Configuration> configurations
    List<String> repositories
    List<String> errors
}

interface Configuration {
    String getName()

    List<Dependency> getDependencies()
}

@Immutable
class ConfigurationImpl implements Configuration, Serializable {
    String name
    List<Dependency> dependencies
}

interface Dependency {
    String getGroupId()

    String getArtifactId()

    String getVersion()

    List<Dependency> getDependencies()

    String getError()

    String getPomFile()
}

@Immutable
class DependencyImpl implements Dependency, Serializable {
    String groupId
    String artifactId
    String version
    List<Dependency> dependencies
    String error
    String pomFile
}

class DependencyTreePlugin implements Plugin<Gradle> {

    private final ToolingModelBuilderRegistry registry

    @Inject
    DependencyTreePlugin(ToolingModelBuilderRegistry registry) {
        this.registry = registry
    }

    void apply(Gradle gradle) {
        registry.register(new DependencyTreeModelBuilder())
    }

    private static class DependencyTreeModelBuilder implements ToolingModelBuilder {
        @Override
        boolean canBuild(String modelName) {
            return modelName == "DependencyTreeModel"
        }

        @Override
        Object buildAll(String modelName, Project project) {

            List<String> errors = []

            List<Configuration> configurations = project.configurations.findResults { configuration ->
                if (configuration.canBeResolved) {
                    ResolutionResult result = configuration.getIncoming().getResolutionResult()
                    List<Dependency> dependencies = result.getRoot().getDependencies().collect { parseDependency(it, project, []) }

                    new ConfigurationImpl(configuration.name, dependencies)
                } else {
                    project.logger.info("Configuration '${configuration.name}' cannot be resolved.")
                    null
                }
            }

            List<String> repositories = project.repositories.collect { it.url.toString() }

            return new DependencyTreeModelImpl(project.name, configurations, repositories, errors)
        }

        Dependency parseDependency(DependencyResult dependencyResult, Project project, List<String> parents) {
            if (dependencyResult instanceof ResolvedDependencyResult) {
                List<Dependency> dependencies = dependencyResult.selected.dependencies.findResults { dependency ->
                    // Do not follow circular dependencies, these can exist for project dependencies.
                    if (!(dependencyResult.requested.displayName in parents)) {
                        parseDependency(dependency, project, [*parents, dependencyResult.requested.displayName])
                    } else {
                        null
                    }
                }

                ComponentIdentifier id = dependencyResult.selected.id
                if (id instanceof ModuleComponentIdentifier) {
                    def result = project.dependencies.createArtifactResolutionQuery()
                            .forComponents(id)
                            .withArtifacts(MavenModule, MavenPomArtifact)
                            .execute()
                            .resolvedComponents.first()
                            .getArtifacts(MavenPomArtifact).first()
                    String error = null
                    String pomFile = null
                    if (result instanceof ResolvedArtifactResult) {
                        pomFile = result.file.absolutePath
                    } else if (result instanceof UnresolvedArtifactResult) {
                        error = collectCauses(result.failure).toString()
                    } else {
                        error = "Unknown ArtifactResult type: ${result.getClass().name}".toString()
                    }
                    return new DependencyImpl(id.group, id.module, id.version, dependencies, error, pomFile)
                } else if (id instanceof ProjectComponentIdentifier) {
                    // TODO: Decide how to mark project dependencies in the model.
                    return new DependencyImpl("", id.displayName, "", dependencies, null, "")
                } else {
                    return new DependencyImpl("", id.displayName, "", dependencies,
                            "Unknown id type: ${id.getClass().simpleName}".toString(), "")
                }
            } else if (dependencyResult instanceof UnresolvedDependencyResult) {
                return new DependencyImpl("", dependencyResult.attempted.displayName, "", [],
                        "Unresolved: ${collectCauses(dependencyResult.failure)}".toString(), "")
            } else {
                return new DependencyImpl("", dependencyResult.requested.displayName, "", [],
                        "Unknown result type: ${dependencyResult.getClass().simpleName}".toString(), "")
            }
        }

        private String collectCauses(Throwable throwable) {
            def result = "${throwable.getClass().simpleName}: ${throwable.message}"
            def cause = throwable.cause
            while (cause != null) {
                result += "\nCaused by: ${cause.getClass().simpleName}: ${cause.message}"
                cause = cause.cause
            }
            return result
        }
    }

}
